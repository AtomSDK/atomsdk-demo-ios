//
//  ConnectWithTagsViewController.m
//  AtomSDK Demo iOS App
//
//  Created by Atom By Secure on 26/08/2019.
//  Copyright Â© 2019 Atom. All rights reserved.
//

#import "ConnectWithTagsViewController.h"
#import "AppDelegate.h"
#import "PopOverViewController.h"

@interface ConnectWithTagsViewController () <UITextFieldDelegate, UIPickerViewDelegate, UIPickerViewDataSource, UIGestureRecognizerDelegate, AtomManagerDelegate, UITableViewDataSource, UIPopoverPresentationControllerDelegate>

@property (nonatomic) NSArray *protocolList;
@property (assign) AtomProtocol *selectedProtocol;

@property (nonatomic) NSArray *tagList;
@property (strong, nonatomic) NSMutableDictionary<NSString*, NSNumber*> * selectedTags;

@property (nonatomic) NSMutableArray *vpnStatus;

@property (nonatomic) IBOutlet UITableView *tableViewStatus;
@property (nonatomic) IBOutlet UITableView *tableViewTags;
@property (nonatomic) IBOutlet UITextField *textfieldProtocol;
@property (nonatomic) IBOutlet UITextField *textfieldTags;
@property (nonatomic) UIPickerView *valuePicker;
@property (nonatomic) IBOutlet UIButton *buttonConnect;
@property (nonatomic) IBOutlet UIBarButtonItem *leftBarButton;

@end

@implementation ConnectWithTagsViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    _vpnStatus = [NSMutableArray new];
    [self statusDidChangedHandler];
    [self getProtocols];
    [self populateTags];
    [self normalUI];
    [AtomManager sharedInstance].delegate = self;
    [self setupTextfield];
    
    AtomVPNStatus state = [[AtomManager sharedInstance] getCurrentVPNStatus];
    switch (state) {
        case DISCONNECTED:
            [self normalUI];
            break;
            
        case CONNECTED:
            [self connectedUI];
        break;
            
        default:
            [self connectingUI];
        break;
    }
}

- (void)viewWillAppear:(BOOL)animated {
    self.tableViewStatus.layer.borderWidth = 1.0;
    self.tableViewStatus.layer.borderColor = [[UIColor grayColor] CGColor];
    self.tableViewStatus.layer.cornerRadius = 10.0;
}

- (IBAction)back:(id)sender {
    [self.navigationController popViewControllerAnimated:true];
}

- (IBAction) connect: (id)sender {
    [self endEditing];
    switch (self.buttonConnect.tag) {
        case 0: {
            NSMutableArray *selectedAtomTags = nil;
            if (_selectedTags.count > 0) {
                NSArray<NSNumber *> *selectedTags = [_selectedTags allValues];
                selectedAtomTags = [NSMutableArray new];
                if (selectedTags != nil && selectedTags.count > 0) {
                    for (int i=0; i<selectedTags.count; i++) {
                        [selectedAtomTags addObject: @([[selectedTags objectAtIndex:i] intValue])];
                    }
                }
            }
    
            AtomCredential *atomCredential = nil;
            if ([AppDelegate sharedInstance].isAutoGeneratedUserCredentials) {
                [AtomManager sharedInstance].UUID = [AppDelegate sharedInstance].UDID;
            }
            else {
                atomCredential = [[AtomCredential alloc] initWithUsername:[AppDelegate sharedInstance].username password:[AppDelegate sharedInstance].password];
                [[AtomManager sharedInstance] setAtomCredential:atomCredential];
            }

            [_vpnStatus removeAllObjects];
            [_tableViewStatus reloadData];
            [self connectingUI];
            AtomProperties *properties = [[AtomProperties alloc] initWithProtocol:_selectedProtocol andTags:selectedAtomTags];
    
            AtomOnDemandConfiguration *configuration = [[AtomOnDemandConfiguration alloc] init];
            configuration.onDemandRulesEnabled = YES;
            [[AtomManager sharedInstance] setOnDemandConfiguration:configuration];
    
            [[AtomManager sharedInstance] connectWithProperties:properties completion:^(NSString *success) {
                NSLog(@"Connected");
            } errorBlock:^(NSError *error) {
                NSLog(@"Error: %@", error);
                [self normalUI];
            }];
        }
        break;
            
        case 1:
            [[AtomManager sharedInstance] disconnectVPN];
            [self normalUI];
        break;
            
        case 2:
            [[AtomManager sharedInstance] cancelVPN];
            [self normalUI];
        break;
            
        default:
        break;
    }
    
}

-(void)endEditing {
    [self.textfieldProtocol resignFirstResponder];
}

- (void) getProtocols {
    [[AtomManager sharedInstance] getProtocolsWithSuccess:^(NSArray<AtomProtocol *> *protocolsList) {
        self.protocolList = protocolsList;
        
        [self.valuePicker selectedRowInComponent:0];
        AtomProtocol *protocol = [AtomProtocol new];
        protocol = self.protocolList[0];
        _textfieldProtocol.text = protocol.name;
        _selectedProtocol = protocol;
    } errorBlock:^(NSError *error) {
        //NSLog(@"%@",error.description);
    }];
}

- (void) populateTags {
    _tagList = [[NSArray alloc] initWithObjects:
                @"SmartConnectAutomatic",
                @"SmartConnectFileSharing",
                @"SmartConnectFreeFilesharing",
                @"SmartConnectAutomaticFileSharing",
                @"SmartConnectFreeUsers",
                @"SmartConnectNatted",
                @"SmartConnectNattedFileSharing",
                @"SmartConnectPaid",
                @"SmartConnectAvfFileSharing",
                @"SmartConnectAvfSecurity",
                nil];
    
    if (_selectedTags == nil) _selectedTags = [NSMutableDictionary new];
}

-(void)setupTextfield {
    CGFloat screenWidth = [UIScreen mainScreen].bounds.size.width;
    
    UIToolbar *toolBar= [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, screenWidth, 44)];
    [toolBar setBarStyle:UIBarStyleDefault];
    UIBarButtonItem *flex = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    UIBarButtonItem *barButtonDone = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStylePlain target:self action:@selector(done)];
    toolBar.items = @[flex, barButtonDone];
    barButtonDone.tintColor = [UIColor blackColor];
    
    _valuePicker = [UIPickerView new];
    _valuePicker.dataSource = self;
    _valuePicker.delegate = self;
    
    UIView *protocolInputView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, screenWidth, toolBar.frame.size.height + _valuePicker.frame.size.height)];
    protocolInputView.backgroundColor = [UIColor clearColor];
    [protocolInputView addSubview:_valuePicker];
    [protocolInputView addSubview:toolBar];
    
//    UIView *tagsInputView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, screenWidth, toolBar.frame.size.height + _valuePicker.frame.size.height)];
//    tagsInputView.backgroundColor = [UIColor clearColor];
//    [tagsInputView addSubview:_valuePicker];
//    [tagsInputView addSubview:toolBar];
    
    [_textfieldProtocol setDelegate:self];
    [_textfieldTags setDelegate:self];
    
    _textfieldProtocol.inputView = protocolInputView;
    _textfieldTags.inputView = protocolInputView;
}

-(void)done {
    [self.textfieldProtocol resignFirstResponder];
    [self.textfieldTags resignFirstResponder];
}

#pragma mark - Navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
}


#pragma mark - UITableView DataSource -
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return tableView.tag == 1 ? _tagList.count : _vpnStatus.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return tableView.tag == 1 ? 30 : 20.0;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"StatusCell"];
    cell.textLabel.text = tableView.tag == 1 ? _tagList[indexPath.row] : _vpnStatus[indexPath.row];
    cell.textLabel.font = [UIFont boldSystemFontOfSize:12.0];
    cell.textLabel.textColor = [UIColor whiteColor];
    cell.backgroundColor = [UIColor blackColor];
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    if (tableView.tag == 1) {
        if (![_selectedTags objectForKey:_tagList[indexPath.row]])
            _selectedTags[_tagList[indexPath.row]] = @(indexPath.row);
        else
            [_selectedTags removeObjectForKey:_tagList[indexPath.row]];
    }
}

#pragma mark - UIPickerView DataSource -
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {
    return self.protocolList.count;
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {
    AtomProtocol *protocol = [AtomProtocol new];
    protocol = self.protocolList[row];
    return protocol.name;
}

-(void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {
    AtomProtocol *protocol = [AtomProtocol new];
    protocol = self.protocolList[row];
    _textfieldProtocol.text = protocol.name;
    _selectedProtocol = protocol;
}

#pragma mark - UITextfield Delegate -
-(void)textFieldDidBeginEditing:(UITextField *)textField {
    [_valuePicker reloadAllComponents];
}
-(void)textFieldDidEndEditing:(UITextField *)textField {
    
}

-(BOOL)textFieldShouldReturn:(UITextField *)textField {
    [textField resignFirstResponder];
    return YES;
}

#pragma mark - VPN UI States
-(void)normalUI {
    [self.buttonConnect setTitle:@"CONNECT" forState:UIControlStateNormal];
    self.buttonConnect.tag = 0;
    self.navigationController.navigationItem.hidesBackButton = false;
    self.navigationItem.leftBarButtonItem = self.leftBarButton;
    self.navigationController.interactivePopGestureRecognizer.enabled = true;
    self.navigationItem.hidesBackButton = false;
}

-(void)connectedUI {
    [self.buttonConnect setTitle:@"DISCONNECT" forState:UIControlStateNormal];
    self.buttonConnect.tag = 1;
    self.navigationItem.leftBarButtonItem = nil;
    self.navigationController.interactivePopGestureRecognizer.enabled = false;
    self.navigationItem.hidesBackButton = true;
}

-(void)connectingUI {
    [self.buttonConnect setTitle:@"CANCEL" forState:UIControlStateNormal];
    self.buttonConnect.tag = 2;
    self.navigationItem.leftBarButtonItem = nil;
    self.navigationController.interactivePopGestureRecognizer.enabled = false;
    self.navigationItem.hidesBackButton = true;
}


#pragma mark - Atom Manager Delegates
-(void)atomManagerDidConnect:(AtomConnectionDetails *)atomConnectionDetails {
    //NSLog(@"VPN CONNECTED");
    
    
    [self connectedUI];
    NSString *message = [NSString stringWithFormat:@"CONNECTED with IP\n%@", [[AtomManager sharedInstance] getConnectedIP]];
    UIAlertController *controller = [UIAlertController alertControllerWithTitle:@"VPN Status" message: message preferredStyle:UIAlertControllerStyleAlert];
    
    UIAlertAction *action = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil];
    [controller addAction:action];
    [self presentViewController:controller animated:YES completion:nil];
    NSLog(@"VPN Status: CONNECTED");
}

-(void)atomManagerDidDisconnect:(AtomConnectionDetails *)atomConnectionDetails {
    //NSLog(@"VPN DISCONNECTED");

    [self normalUI];
}

-(void)atomManagerOnRedialing:(AtomConnectionDetails *)atomConnectionDetails withError:(NSError *)error {
    //NSLog(@"REDIALING CONNECTION");
    
    [self connectingUI];
}

-(void)atomManagerDialErrorReceived:(NSError *)error withConnectionDetails:(AtomConnectionDetails *)atomConnectionDetails {
    //NSLog(@"DIALED ERROR: %@",error.description);
    
    [_vpnStatus addObject:[NSString stringWithFormat:@"Error: %ld - %@",(long)error.code,error.localizedDescription]];
    [_tableViewStatus reloadData];
    if(error.code != 5043 && [[AtomManager sharedInstance]getCurrentVPNStatus] == CONNECTED)
        [self normalUI];
}

#pragma mark - Atom Status Handler -

-(void)statusDidChangedHandler {
    [AtomManager sharedInstance].stateDidChangedHandler = ^(AtomVPNState status) {
        switch (status) {
            case AtomStatusInvalid:
                [_vpnStatus addObject:@"Invalid"];
                break;
            case AtomStatusConnected:
                [_vpnStatus addObject:@"Connected"];
                break;
            case AtomStatusConnecting:
                [_vpnStatus addObject:@"Connecting"];
                break;
            case AtomStatusValidating:
                [_vpnStatus addObject:@"Validating"];
                break;
            case AtomStatusReasserting:
                [_vpnStatus addObject:@"Reasserting"];
                break;
            case AtomStatusDisconnected:
                [_vpnStatus addObject:@"Disconnected"];
                break;
            case AtomStatusDisconnecting:
                [_vpnStatus addObject:@"Disconnecting"];
                break;
            case AtomStatusAuthenticating:
                [_vpnStatus addObject:@"Authenticating"];
                break;
            case AtomStatusVerifyingHostName:
                [_vpnStatus addObject:@"Verifying Hostname"];
                break;
            case AtomStatusGettingFastestServer:
                [_vpnStatus addObject:@"Getting Faster Server"];
                break;
            case AtomStatusOptimizingConnection:
                [_vpnStatus addObject:@"Optimizing Connection"];
                break;
            case AtomStatusGeneratingCredentials:
                [_vpnStatus addObject:@"Generating Credentials"];
                break;
            default:
                break;
        }
        [_tableViewStatus reloadData];
        
    };
}

@end
